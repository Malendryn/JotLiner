-----------------------------------------------------------------------------------------------------------------------
Review the licenses and licensed files to make sure everything's in place as it should.
-----------------------------------------------------------------------------------------------------------------------
checkout quilljs.com as a textEditor plugin
-----------------------------------------------------------------------------------------------------------------------
so to migrate the database:
3 -> 4 -> 5  now done, but think about export:

as docname is now in doc and not docTree, we should make that part of the import/export logic.

so now lets add import/export to the contextmenu so we can actually save/load this stuff


upcoming comment for CHANGELOG.txt:
    
* as a subpart of the 4->5 conversion we're adding the doc name to the doc export functions.  so at the head of the export
   instead of just @1.1;uu-i-d;  we'll have @1.1;uu-i-d;This is my \;test\; doc;  (introducing escaped charcodes now too)



we must make sure it's all valid text and maybe doesn't use semicolons?  (either
that or we need to start supporting escaped semicolons!)

I thought about b64encoding it but it would be nice to see the docname in a text editor!

maybe we should focus on export/import first so we understand the logic better?


5->6
*) add 'bump' to every table
*) add new 'dch' table
*) go through each doc table and yank it apart, putting all the dch elements into the dch table
*) remove 'content' field from doc table

REMEMBER NOW WHEN DELETING FROM table:doc WE ALSO HAVE TO DELETE ALL ITS KIDS IN table:dch

so now also when editing a loaded dch we need to know its recid even though this is something that never needed to happen
before.

-----------------------------------------------------------------------------------------------------------------------
change these two:
    {action:"newDocAtSame",  label:"New document",            tip:"Insert a new document below the selected one"},
    {action:"newDocAsChild", label:"New child document",      tip:"Insert a new document as a child of the selected one"},
to a single one, and in the dialog add a checkmark 'as childof' instead

.... so that it now matches the 'import' dialog style
-----------------------------------------------------------------------------------------------------------------------
A) consider on the menu for inserting plugins to add them as a submenu and not use the phrase "Insert New" in such a way 
     that makes plugins named "My Plugin" seem awkwared, (Insert New My Plugin just doesn't read well! )
B) once we do this, go repair the "HOWTO create a plugin.odt" file too

Come up with a simple WS packet for plugins to use,  something that can create/delete tables in the DB so that they
never have to modify the server or client .js in order to add features to the serverside
-----------------------------------------------------------------------------------------------------------------------
creating a simple painter plugin as an example,  howto/what to change/what to do.
I don't have an 'auto .css' loader so I have to add that.  
    rules:  its name must mach the plugin so for ./TPAINT/dch_TPAINT.js we have dch_TPAINT.css
        this needs to be tracked so that it is removed from <head> when doc is cleared OR the last dch_<module> of this
        type is deleted from the module

-----------------------------------------------------------------------------------------------------------------------
WHAT IF FOR allowing plugins to have DB recs of their own, we simply had them pass us a dict, and we created a table
for them based on that dict. (which must also include a vernum perhaps AND an id field)  and then they could upgrade
by passing us a new dict with a new vernum and we parsed it and figured out what needed to be done to migrate from
that old format to the new one.  (which may be easier by creating a whole new table in a 
one-time-only pull-from-old,writeto-new,nuke-old)
-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
minor quirk in that when rightpane is useless (no doc selected) alt+shift shouldn't do ANYthing at all.  (right now
it's taking over the titlebar/toolbar)
-----------------------------------------------------------------------------------------------------------------------
the position of the seperator dragbar between index and doc views needs to be recorded in localStorage on a per-database level
-----------------------------------------------------------------------------------------------------------------------
Would it make sense to put autoSave into DCH_BASE?  if we did we could make the default timeout different per-plugin!
-----------------------------------------------------------------------------------------------------------------------
Would it make sense to break every 'doc' down into per-plugin records in the DB?  It would make for much shorter and 
quicker push-pulls and collaboration read-writes!  (This would also allow each plugin to handle their own undo-redo without
affecting other plugins)
-----------------------------------------------------------------------------------------------------------------------
change 'properties' to 'Layout, anchors and depth'
    add zX/zY properties to the box DCH
    add depth inc/dec/back/front buttons somewhere (with numerics such as depth="5 of 10" ...
    )
add a new 'properties' menuOption that's dch-specific
    for most divs allow 
        backgroundcolor (including alpha)  -- (default to 'transparent' for things like textArea so that setting this in dch properties works)
        borderType (1px red dashed)
        font, 
for fonts we should include our own ONLY so as to maintain compatibility across browsers/os's/installs

-----------------------------------------------------------------------------------------------------------------------
we used to load dch modules as-needed and not before.  we should go back to doing that again (to keep memory use down)
    in index.js we already fetch all modulepaths, we can just insert them into DCH[dchName] as null and loadAsNeeded
-----------------------------------------------------------------------------------------------------------------------
make docTree dragdrop work properly!  (reordering of doctree documents)
    move docs (dragdrop, in/out depth too)
-----------------------------------------------------------------------------------------------------------------------
track state of expanded index pane entries
        we need this per-client methinks so not something to track in the db
-----------------------------------------------------------------------------------------------------------------------
we can now create and select db's, but we can't delete them yet
-----------------------------------------------------------------------------------------------------------------------
allow changing of dch 'depth' / overlap
-----------------------------------------------------------------------------------------------------------------------
click+drag 'accelerators' in the properties window that fast-move coords kindalike blender does
-----------------------------------------------------------------------------------------------------------------------
in properties add a 'fill parent' button that sets TBLR to '0px' and WH to '' (transform: already accts for zX/Y)
-----------------------------------------------------------------------------------------------------------------------
in properties add a 'zero x/y' button to the infinity offset
-----------------------------------------------------------------------------------------------------------------------
in properties popup for DCH_BOX we want to show 'infinite Pan offset' and let user edit it (in the properties popup!)
-----------------------------------------------------------------------------------------------------------------------
NICE TO HAVE if when mode1 we could drag corners of a box that we see the shadow of but the corner we want to drag
is invisible cuz it's outside the frame of the parent BOX
-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
PRE-GITHUB Todos

* front/back depth of dch's within document
* cut/copy/paste dch's (or delete/copy/move wherein copy/move .cursor('x') the mouseIcon til you click to drop)
* dialogs like colorwheel rgba
        we will use Pickr (see TEST_Pickr.html)  but we want a local copy so no src="https://..."
            remember how to handle the MIT licence on it properly!
* add more 'demo' dch's like 
    SSH spreadsheet, 
    IMG pic(gif/jpg/png) although technically CTE does this
    IDEF0 IDEF0 (also named like this to show that names are not restricted to 3 characters!)
    DWG (drawing program)
    CODE codeblock (monospaced, linenumbered)
    MDN Markdown (Github compatible)
-----------------------------------------------------------------------------------------------------------------------
don't forget that when we add the Colorpikr to license it appropriately!
-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
TODO
* I kinda like the little icon cherrytree puts in front of the index entries, but maybe instead we just make a little box
    that you can set the color of?  or maybe color the entire entry?

* ?UNDO?  (possibly not needed as CTE for example already does this)

* we should consider timestamping the ‘send-expect’ed packet in the queue (we do, actually) and maybe once a sec check 
    for ‘dead’ packets (we don't do, yet)  maybe even adding a ‘timeoutLength’ option too
    and also a way to cancel-expect so at least on the client side we can say ‘try again’ sooner so we don't end up 
    with two responses

* store dragbar location in userLocalStore (loaded question, store zX/Y in localStorage or in the doc???)
* store which indexEntrys are expanded in userLocalStore
-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
LOWER PRIORITY STUFF -- LOWER PRIORITY STUFF -- LOWER PRIORITY STUFF -- LOWER PRIORITY STUFF -- LOWER PRIORITY STUFF -- 
-----------------------------------------------------------------------------------------------------------------------
add using cmdCombo+arrowkeys to move the boxes one pixel at a time
    problem with this is as I have to remain hovering over the object to move, but that's not really a biggie is it?
        of course if you shift the box away from the mouse you'll have issues...
-----------------------------------------------------------------------------------------------------------------------
TODO: consider requestAnimationFrame()  (We haven't needed it ... yet!)

when dragging DCH_BOX children, the mouse activity is entirely delta-from-prior-movement based, and this can get
glitchy.  The proper way to do it is to track the box's position seperately (for example trap boxData at moment of
mousedown) and delta it from there, calling 'id = requestAnimationFrame()' to do actual boxMovement and scrollboxSizing
(and with the id we can call cancelAnimationFrame() to remove any unprocessed ones off the queue first)

NOTE: I can't know if a returned id actually fired but I can track it myself with an incrementer or a [] of id's, and 
then have the requestAnimationFrame's (callback) delete its own id from the list,  thereby letting me iterate through
the list of uncancelled ones and cancelling them

howabout array.push(requestAnimationFrame(callbacK)) and then in callback delete that id from array cuz its now 
processing, and then also before calling array.push(...) iterate through the array and cancelAnimationFrame() 
on any id's still present (and empty the array too)

SO DO THIS: --- SO DO THIS: --- SO DO THIS: --- SO DO THIS: --- SO DO THIS: --- SO DO THIS: --- SO DO THIS: --- 
SO DO THIS: --- SO DO THIS: --- SO DO THIS: --- SO DO THIS: --- SO DO THIS: --- SO DO THIS: --- SO DO THIS: --- 
SO DO THIS: --- SO DO THIS: --- SO DO THIS: --- SO DO THIS: --- SO DO THIS: --- SO DO THIS: --- SO DO THIS: --- 
const frameArray = [];
function scheduleFrame(data) {
    for (let idx = 0; idx < frameArray.length; idx++) {   // cancel all non-processed frames
        cancelAnimationFrame(frameArray[idx]);
    }
    frameArray.length = 0;  // blowout the array
    const id = requestAnimationFrame(() => {
        ProcessData(data);
        const index = frameArray.indexOf(frameId);
          frameArray.splice(index, 1); // Remove the ID from the array
    });
    frameArray.push(id);
}

scheduleFrame("test");
