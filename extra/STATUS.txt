2025-04- ------------------------------------------------------------------------------------------------------------
2025-04- ------------------------------------------------------------------------------------------------------------
2025-04- ------------------------------------------------------------------------------------------------------------
2025-04- ------------------------------------------------------------------------------------------------------------
2025-04- ------------------------------------------------------------------------------------------------------------
2025-04- ------------------------------------------------------------------------------------------------------------
2025-04- ------------------------------------------------------------------------------------------------------------
2025-04- ------------------------------------------------------------------------------------------------------------

Hey!  on 'finding' a div that's the parent of an internal item like a textarea... what if I put a simple flagvar on the 
div so I can say when mouse is clicked 'do you have the mark?' on the clicked-on element  if no, ask parent, rinse-repeat

much todo yet just on sizing!
still have to add modifier keys (ctrl,alt,  doubletap-ctrl, etc)
have to add dragsizing when on a corner of the box (not just dragging the whole box)
  (could do this either when nearest to a corner (say within 8px, LIMITS minsize!)
       OR by a modifier -- adds complexity )
  maybe addd a click+mod+mousedown that switches us into a 'mode' that is this whole drag/size etc, uses the titlebar
     with icons for 'move,resize' etc... also shows xylrtb in titlebar and allows direct editing of them)
      a little slower but a LOT more powerful!  

2025-04-17 ------------------------------------------------------------------------------------------------------------
the click+drag logic is looking pretty good!  it handles all cases of L,R,W,H boxsizings

however it looks like we need to track all divs that we consider 'parent' divs so when mousedragging 
we drag the parent instead of the child  (EG: we dont want to drag the textarea, we want to drag the div owning it)

this is currently just doing simple click+drag, no alt/ctrl modifiers

2025-04-17 ------------------------------------------------------------------------------------------------------------
did even more revamping of the docFormat and gave more control to the handlers
* DCH_BASE.create() now gets sr passed to it which if not null loads this.div's setup params now before calling 
    .construct() on the child
* removed .hasChunk, it's now up to the handlers to read their own chunks (so they could have multiple chunks now)
* removed makeEl() and left creating internal components to their own handling

2025-04-17 ------------------------------------------------------------------------------------------------------------
* changed parse/unparse to loadDoc and unloadDoc cuz parse is a useful word to allow the handler to own
* changed docformat to L20;T20;R20;B20;W20;H20; instead of forcing XYWH so now div can freely float to right/bottom

2025-04-07 ------------------------------------------------------------------------------------------------------------
* more adj. to docloader so now VER isnt a handler any more, but first chars inFile must be "M.m;" for Major.Minor
* removed XYWH as vars from the class and am now relying on el.style.top/left/(width/right)/(height/bottom)
* fleshed out the FF.newDoc() and FF.clearDoc() functions
* added DOCS.txt to remind me how I intend to start handling keyboard/mouse ops in a way that won't interfere with 
* commonly used ops inside any DocHandler
Next up is start addling keyboard/mouse handlers (see DOCS.txt)

2025-04-06 ------------------------------------------------------------------------------------------------------------
Did some more constructor reworking to cleanup handler creation a bit more
doc loads nicely now and implemented a supersimple textarea for the TXT handler! (Renamed to TXA from TXT)

2025-04-05 ------------------------------------------------------------------------------------------------------------
Another restructuring
* found that vars put directly on a childclass arent seen by the baseclass (at least not in the constructor) so I
  created a construct() function the children must implement that's called by the baseclass constructor()
* moved the load/unload routines OUT of the baseclass into DocComponentLoader to make the handlers more 'pristine'
* renamed DocComponentLoader to DocLoader as it's now directly relative to doc and no longer to the DocComponents
* added JSDoc stuff to the baseclass to try to make it easier to see the child/parent/impl/override etc nature
* changed load(sr,parent)/str=unload() to parse(sr)/str=unparse() as !must impl! emptyFuncs baseclass
* moved setting of parent and div creation/attachment (this.div) to constructor()
* moved setting XYWH "px" to DocLoader parse()

2025-04-05 ------------------------------------------------------------------------------------------------------------
I was going to allow XYWH to let negative WH work from the right border, but OneNote never did that, and I think it just
complicates things,  so we'll stick with XYWH being absolute values
* changed 'isRaw'   to 'hasChunk'
* changed 'hasXYWH' to 'hasDiv'
* I unfortunately finally lost in an attempt to define class functions beneath the class when I tried using super.func()
  so I have instead changed these to be simple comments at the top of the class for clarity, while at the bottom of the
  class the actual function exists (instead of being defined beneath the class)
* loading AND drawing now works!  ... at least in a testing capacity
* I have also reintroduced allowing negative WH as I found that by making all divs 'position="absolute"' this now works!
    (I still do not see a need for it in a document like this, but it's nice to know it works!!)

2025-04-04 ------------------------------------------------------------------------------------------------------------
added a VER handler to load a version from the file for the purposes of updating
* changed 'type' to 'hasXYWH' and 'isRaw'

starting to get the visual layout working,  'BOX' now shows a box
next is to get TXT working too

2025-04-03 ------------------------------------------------------------------------------------------------------------
Now that I got the loader working ... I rewrote it again!  NO LONGER uses +=-  just straightup BOX TXT etc objects

2025-04-03 ------------------------------------------------------------------------------------------------------------
have it now loading the sample doc, including stepping in and out of children.
next aim is to display these loaded DocComponents 

2025-04-01 ------------------------------------------------------------------------------------------------------------
began fleshing out classes to load/unload an actual document, and to define the format of a document as well
(I am avoiding using the word Jot or JotLiner anywhere in the code as I still may change the name of the project)

2025-04-01 ------------------------------------------------------------------------------------------------------------
began laying out overall 'frame' of file format
figured out new way to achieve c++-like inheritance without using .prototype
moved all client code one subdir deeper (under html) so that .vscode, .envrc etc arent part of the user content

2025-03-31 ------------------------------------------------------------------------------------------------------------
got all the basics of loading bem_core_<name>.js modules working in both frontend and backend of client
reworked globals and initialization (formerly bootstrap) to be more 'appropriately positioned'?

at any rate the basics on both front and backend are now all set up to work properly once again!

2025-03-30 ------------------------------------------------------------------------------------------------------------
managed to seperate client and server into 2 diff debuggers so I can launch 
    code code.workspace in the server dir and F5 to run and debug that
    --and seperately launch--
    code code.workspace in the client dir and F5 to run and debug that AT the same time


2025-03-28 ------------------------------------------------------------------------------------------------------------
got the most basic stuff working now
got a simple 'client/jotliner.html' setup and debuggable using vscode
got a simple 'server/jlserver.js' setup (as an express server on 8080) and debuggable using vscode

next step is to move the bulk of the functionality out of 'project.jotliner_02' into this project
2025-03-28 ------------------------------------------------------------------------------------------------------------
Starting project anew (again!)
Concept this time is everything runs in a webpage and it talks to an SQL DB on some backend

Notion here is that html already handles all we desire, we just have to figure out how to make it work for us


