2025-05- ------------------------------------------------------------------------------------------------------------
2025-05- ------------------------------------------------------------------------------------------------------------
2025-05- ------------------------------------------------------------------------------------------------------------
2025-05- ------------------------------------------------------------------------------------------------------------
2025-05- ------------------------------------------------------------------------------------------------------------
2025-05- ------------------------------------------------------------------------------------------------------------
2025-05- ------------------------------------------------------------------------------------------------------------
2025-05- ------------------------------------------------------------------------------------------------------------
2025-05- ------------------------------------------------------------------------------------------------------------
2025-05- ------------------------------------------------------------------------------------------------------------
2025-05- ------------------------------------------------------------------------------------------------------------
2025-05- ------------------------------------------------------------------------------------------------------------
2025-05-20 ------------------------------------------------------------------------------------------------------------
* added an onClose() callback to DCHDialog and moved all callbacks to constructor() so that open() only has data as
    parameters now
* fixed bug where in properties dialog, With CTE and TXA (and probably all others including box too)  when you click 
    'width' or 'left' the internal child divs within the dch get all wonky
* added serverside awareness of multiple databases over multiple connections so each connection can be talking to
    different databases, but still with only a single handle to any single database open at a time.
* renamed fem_core_divIndexViewHandler.js to fem_core_IndexViewHandler.js
* finished the dropdown to select current db and the entire process chain to load it, the index list, and the last
    opened document of that db

2025-05-19 ------------------------------------------------------------------------------------------------------------
* changed away from using a wsPacket call to load the most recent document, to using localStorage instead.
    removed curDocUuid from db 'extra' table, now using localStorage "lastOpenedDoc"
* changed my mind and finished DFDialog and replaced the old one I wrote entirely now.

2025-05-18 ------------------------------------------------------------------------------------------------------------
* fixed when creating new DCH in an zX/Y !=0 BOX it locates incorrectly
* created new DFContextMenu class that allows submenus of n-depth.  Standalone class.  loads its own .css file as well
     does not include a menubar system, that is still a seperate construct at present
* created new MenuBar class that creates a horizontal menu bar in a supplied <div> and uses the new DFContextMenu class
     to create its dropdown menus
* replaced and deleted the original DCHContextMenu.js file
* fixed OOBounds showing red edges, was highlighting even in mode0
* shrunk the titlebar from 30px to 24px and raised toobar and mainview up to match
* have the new DFDialog class partially working, but as it's not really that important right now am shelving it til later
* BUG: with CTE and TXA (and probably all others including box too)  when properties open adn you click 'width' or 'left'
    the internal child divs within the dch get all wonky

2025-05-16 ------------------------------------------------------------------------------------------------------------
* fixed not autosaving when mode2-panning
* upgraded so the out-of-bands (red) borders now show/hide in realtime when boxes are moved or panned

2025-05-16 ------------------------------------------------------------------------------------------------------------
* removed disableAllShadowHosts() as obsolete
* fixed bug where in mode2 hovering from one BOX to another would leave old ghosts lying around
* added a 5px 'red edge' to BOX nodes to indicate there's children that extend past the edge in that direction

2025-05-16 ------------------------------------------------------------------------------------------------------------
* successful rename of origin/master to origin/main
* removed all of mask & divMask from the system,  seems to have caused no issues!  We now only use divGhost!
* reinstituded the titlebar override and moved the texts for Node: <name> and Mode: <drag/pan> up to it
* have ghosting in mode2 working nicely now.  (each child has its own ghost that's visible even when child is 
    outside parentBox)

2025-05-16 ------------------------------------------------------------------------------------------------------------
* cleaned up the toolbar override for cmdMode1/2 coordinates display
* removed the titlebar override entirely (for now at least)
* about to rename all of git's origin/master to origin/main
* about to work on the ghosts being different between mode1 and mode2

2025-05-16 ------------------------------------------------------------------------------------------------------------
* accidentally 'undid' some changes via a wrong git command, but they seem to have been pretty minor as nothing broke
* changed direct testing for keyAlt+keyShift to a function getCmdMode() to make future configuration options easier
* changed the alt+shift-then-releaseOne-then-alt+shift to go to mode2, to now be alt+shift+z
* solved a bug that allowed rootDch to be dragged if you went to mode1 AFTER going to mode2
* started fleshing out some README/FEATURESCONTRIBUTING .md files for eventual pushing to github
* moved the whole mask/ghost tracking data OUT of .mkStates and into .mgStates so that both are now 'flat' and can be
    shallow-cloned reliably
2025-05-14 ------------------------------------------------------------------------------------------------------------
* added a toolbar that shows LWR THB dims when cmdCombo+mouse is down over a dch for visual dragging/sizing info
    still 'glitchy' when dragging off left/top of outer BOX
* replaced dragMaskDiv and sizeMaskDiv with FF.moveDivRelative, FF.moveDivAbsolute, and FF.sizeDivRelative
* got rid of DCH_BASE.hasDiv -- all dch's have a __sysDiv so this was irrelevant
* got rid of FG.kmStates.sysDiv as redundant (same as FG.kmStates.dch.__sysDiv)

system overhaul: MUCH needs to change now to handle infinite canvas!
* changed ctrl+alt to alt+shift for better generic os-compatibility,  (still want to consider making this user defined)
* added alt+shift=mode1 (mode one), then release either key + press again = mode2,  (repeat toggles between mode1 and 2)
  when neither are pressed , is mode0
* removed scrollbars entirely and going with mode2 = drag
      lots to fix/debug because of this
* without scrollbars removed dch.__scroll entirely as children now 'float' within the host
* .zX/Y now simply defines an offset, positive OR negative, to style.transform all children by

* fixed up many issues with the new overhaul, handling drag/resize of mode1 nodes, and drag/offsetting in mode2 as well
    things are looking pretty stable right now!
* added a titlebar msg now too, 
    when in mode1, it shows the zX/Y offset of the parent BOX (or self if is a BOX)
    when in mode2, it shows the zX/Y offset of the box you're infiniShifting
* zX/Y is also now being stored in the doc on export and read back in reliably
* fixed the ghosting so now it stays ghosted when opening contextmenu and properties so you see the ghost as well as 
    the actual box being edited while properties is open (makes knowing which box is being edited much easier!)

2025-05-12 ------------------------------------------------------------------------------------------------------------
* moved some of the CTE style settings out to its own CTE.css file now
* moved most of the BOX style settings out to index.css (BOX is a specialcase system-level DCH)
* fixed up some sizing problems on the internals of the new shadow DOMs
* fixed up much of the dragbar issues
* renamed DCH_BASE.parent to .__parent to signify its an internal var only
* moved/repaired .destroy() such that it now unlinks itself from its parent rather than the parent unlinking the child
* added calls to .__update() when dch's get dragged or located in the properties popup
* renamed kmask.el to kmask.sysDiv to be more 'informative'

2025-05-11 ------------------------------------------------------------------------------------------------------------
* set a minWidth and minHeight on all dch's to 20px
* fixed issue with properties pane changing L+W to L+R, the style=border was causing problems so now using boxShadow
* introduced 'shadow doms' as wrappers around dch component contents (except for BOX which is now a SUPERspecial case!)
    added .shadowBox.disable to index.css to allow this to work by 'disabling' shadow doms whenever ctrl+alt is down.
    (Some bugs are expected until I fully flesh this out)
* changed .children to .__children to privatize it and test for dchName == "BOX" in DCH_BASE now to enforce
    specificity, and remove 'children' entirely from that class
* completely removed 'children' from DCH_BASE as it's now handled entirely within "DCH_BOX
* changed DCH[] from just having =dch to having ={ dch:dch, srcUrl:path }
* got DCH_BASE.loadCss(file) working to load a .css file into a <style> element at the top of the .host div
    the function restricts loading only from its specific directory (yes I know, NO security beyond code-review!)

2025-05-10 ------------------------------------------------------------------------------------------------------------
* modded CTE so it now defaults to wrap
* fixed cancel/save button issues in popup (made it a <table>)
* removed '*.db' from git,  local pulls should be using their own db
* got rid of DCH_BASE.removeDCHListenerByEA on account it never got used and could remove more than one if used wrongly
* created FF.addTrackedListener, FF.removeTrackedListenerById, and FF.removeAllTrackedListeners to make it much easier
      to remove listeners at a generic level and to allow children to add listeners to things like popups and dialogs
      without having to track-and-remove them themselves when the dialogs/popups get closed
* removed addDCHListener, removeDCHListener... from DCH_BASE and now use FF.addTrackedListener instead.  (There is a 
      caveat that autoremoval on dch destroyed now ONLY applies to listeners added to children of dch's 'host' <div>)
* added 'Rename document' to the index context menu
* popup dialogs are now draggable

2025-05-09 ------------------------------------------------------------------------------------------------------------
* changed DCH_BASE._div to .__sysDiv to clarify 'owned by system, do not touch
* added _host to DCH_BASE and this is NOW where the dch itself puts its stuff! (this is where transformXY will happen)
* moved refs to _div to the new _host on all children of DCH_BASE
* decided to change _host to host and _tBar to toolbar to remove the 'privateness' of them
* changed _path to srcUrl to keep '_' and '__' hidden'ness more cannon and to let childClasses know they can use srcUrl.

2025-05-09 ------------------------------------------------------------------------------------------------------------
* fixed some issues with being able to drag sizer or select indexEntries while a modal was open
* fixed an issue where it wasnt properly loading 'empty' documents sometimes (docs with nothing but the starter BOX)
* fixed bug in importer where a 'KEYWRD=0;' (where datalen = 0), caused data to come in as undefined rather than ""
* got the properties box working!  anchors and positionals all work, even cancel and autoSave works!

2025-05-08 ------------------------------------------------------------------------------------------------------------
* tooltips now show in context menus
* fixed problem with toolbars not showing when node selected
* fixed problem where sometimes changing selected document in index view left prior selections darkened/selected
* got index pane working using <ul><li> with expandable arrowed segments, and fully supports dragging now too!
    (dragging only works visually, it doesn't yet update the order in the db)
* removed all click,dragstart/over/end listeners on each <li> in index pane, now just listen on toplevel <ul>

2025-05-07 ------------------------------------------------------------------------------------------------------------
* fixed rect position 'properties' popup (was showing whole <body> relative, now is <parent> relative)
* changed 'Set Element Styles' in context menu to "Properties"
* added connected-client tracking (BG.clients)
* added BF.onChanged(ws, table, uuid) to allow me to tell to other connected clients that this table and/or rec changed
* multiple clients now receive changes from other clients in near-realtime 
* delete dch node now works (rightclick on any node and delete it and its children)
* cleaned up some ops reguarding setting currently selected doc in db 'extra' table

2025-05-06 ------------------------------------------------------------------------------------------------------------
* renamed addListener to addDCHListener to better distinguish it from addEventListener
    renamed removeListener and friends to removeDCHListener... too
* fixed bug with contextMenu not closing before popups opened
* added listOrder functionality to the index pane
* added delete doc to contextMenu with full support for deleting docTree too, 
    and renumbering listOrder of all affected records as well
* got the indexPane drag/drop working again (in appearance only, it does not yet move docs at the database side!)
* added autoSave() to CTE plugin when any content changes
* fixed (kindasorta?) the problem with default context menu on rightclick and dragging outside the divDocView by
     comparing mouseXY with divDocView rect and unsetting ALL buttons if it goes outside

2025-05-06 ------------------------------------------------------------------------------------------------------------
* started building out a popup when "Set Element Styles" is selected from context menu over a dch
    this popup allows selecting the anchors for the sides and width/height
    it also shows all the current pixel values of the selected dch and will soon let you change them and update
      the actual dch in real time
* things are getting tricky... added a FG.kmStates.modal which is true if any dlg or menu or contextmnu is open to
    prevent multiple openings and/or current-selections from being changed (prior to this dch was changing when mouseovered
    while popupDlg was open which was messing things up badly)
* fixed up a few issues with modality,  added a FG.kmStates.modal t/f flag so if any dialogs/menus are open the rest of
    the system can prevent actions while open.
* added FF.autoSave(delay) func that saves current FG.curDoc (if not null) to backend after 5 secs, unless called again
    in which case it's aborted and a new AutoSave() is called
* added FF.waitDirty() paired with FF.autoSave() to wait until save is complete and dirty is clear before moving on
* worked out an Apache 2.0 license that I think fits my goals and allows 3rd party plugins in the way I want

2025-05-05 ------------------------------------------------------------------------------------------------------------
* dch resize now fully working! (ctrl+alt+cornerdrag)
    all the mousecursors are now working
    leftdrag and topdrag (and consequently topleft angle drag) now working
* removed fem_core_DCHContextMenu.js as it is now absorbed into fem_core_TKMEvtHandlers.js

2025-05-04 ------------------------------------------------------------------------------------------------------------
* finally renamed this file from STATUS.txt to CHANGELOG.txt!
* got rid of <div id="docWrapper"> inside <div id="divDocView"> as it was redundant, now using divDocView directly
lets get to working on resizing the dch's!
* reworked ENTIRE cmdCombo dragging system, now greys hovered boxes even if they're partially covered!
* reworked divIndexDoc dragbar system as well
    there is a minor quirk where if you have c+a down, then click+drag, then with c+a STILL down you click+drag a diff
    object, its starting x/y is a little off and it 'jumps' a short distance.  I haven't yet found what's causing that
* added a TODO.txt file (used to track this in CherryTree but it makes more sense to have it as a .txt in here)

2025-05-03 ------------------------------------------------------------------------------------------------------------
* fixed issue with loading TESTDOC where it showed the toolbar at doc-load-time
* doctree now being fetched from server and populating index pane and selecting docs fetches and displays them
* doctree now also ordered-and-indented
* WS.NewDoc no longer returns doctree, was easier to keep it seperate to genericize the docTree reloading/displaying ops

2025-05-03 ------------------------------------------------------------------------------------------------------------
* renamed table docList to docIndex ... and then to docTree
* changed FG.docUuid to FG.curDoc={id,name,uuid,listOrder,parent,rootDch}
* got rid of FG.docRoot, now FG.curDoc.rootDch
* added FG.docIndex which is now entire docIndex table
* removed curSelectedLI as it's now available in FG.docTree[idx]

2025-05-02 ------------------------------------------------------------------------------------------------------------
* fixed up some db design layout problems
* got basic indexView working (no indent yet, no sorting yet) where it loads from DB!
* got basic loading of doc when clicking on an indexElement
      has issue where it puts selection on the CTE box and thereby shows the CTI toolbar atop screen when it shouldnt!

2025-05-02 ------------------------------------------------------------------------------------------------------------
* cleaned up some toplevel mouse/kbd logic  (now tracks mouse&keystates much better)
* cleaned up the contextMenu so it now it stays within pagesize
* added a 'global state' tracker for mouseXY, buttons 0,1,2, and keystates ctrl/alt/shift/meta
    the thought here is to have better control over where everything is in a more generic way than to track
    mousedown/move/up and keydown/up all seperately
* added a 'change 1px solid border' to 'dashed' when ctrl+alt+hover BUT thinking about putting a hollow div over
     dchdiv instead for better visibility  (but maybe later)
* added a popupMenu handler
* renamed a few things for better clarity
* started adding code to insert new documents and sending it to server, then getting new DocList back from server

2025-04-30 ------------------------------------------------------------------------------------------------------------
* 'flattened' the dchContextMenu so it's no longer multitier (wasn't really multitier anyway!)
* sort'a genericized the dchContextMenu too so it now takes a [list] and a callback
* modded the dch element contextMenu so it now works in-part!  create dchComponent, export, now work from it!

2025-04-30 ------------------------------------------------------------------------------------------------------------
* got rid of "DOC" dch on account of toplevel object MUST have a '_div' in order for ctrl+alt operations to work
* docs now start with '@n.n;uuuuuuuu-uuuu-iiii-dddd-xxxxxxxxxxxx;' INCLUDING copypastes in case we copypaste across
      installs
* also made sure toplevel BOX is always top:0;left:0;right:0;bottom:0;

* finally got started on the leftpane index system
    added fem_core_divIndexViewHandler.js which allows 
        ✓ drag-drop for reordering     works on screen but still doesnt affect DB or id-ordering
        ✓ leftclick for sel/show       selects item but doesnt yet show it in the docView
        ✓ rightclick for contextMenu   funcall fires but no context menu to show yet.

2025-04-28 ------------------------------------------------------------------------------------------------------------
* changed DCH_BASE.children to recognize 'null' as meaning cannot have children and [] as can have.
* have a contextmenu working now that shows 'add Editor' 'change anchors' 'delete' and 'export'
    it's crude as it doesn't show all children but it DOES work!
    it also doesnt position itself fully within the window if I open it when the mouse is down low

 2025-04-27 ------------------------------------------------------------------------------------------------------------
* renamed ._bar to ._tBar as it felt too 'generalized'
* moved loading handlers to index.js (via ws "GetDCHList") so they're available right up front for 'new editor' menu
    consequently -- removed the autoload feature in DCH_BASE.create
        There's still an issue of defining the order of modules in 'new editor' menu but we can address that later
            for now we just use the iter-order of the DCH{} object
* added these statics to the DCH_ZZZ classes so we know how to display them in the 'new editor' menu:
    static menuDesc = "Simple RichText editor"
    static menuTip  = "A RichText-like editor built using a contexteditable <div>"

2025-04-25 ------------------------------------------------------------------------------------------------------------
* got the toolbar working as a 30px high 'this._tBar' div that a dch can do anything it wants inside of.  
* tested this.addListener and this.removeAllListeners
* tested FG.docRoot.destroy() and it properly follows chain of unlistening, unhooking, and deleting self+all children
* got toolbars to show when a dch is clicked on.  However this introduced the 'wierd bug' where if I click on a box
* in a no-content area it highlights the <textarea> boxes and allows me to copy/past them.  I used to resolve this by
* eating all mousedown/move/up ops but I can't DO that cuz controls need the mouse!

2025-04-24 ------------------------------------------------------------------------------------------------------------
* got the database creator working and creating the extra, docList, and doc tables

2025-04-23 ------------------------------------------------------------------------------------------------------------
* added addListener(), removeListenerById(id), removeListenerByEA(el,action), removeAllListeners() to DCH_BASE
* added destroy() and destruct() to DCH_BASE
* renamed DCH_BASE.div to ._div to better clarify 'belongs to DCH_BASE'
* removed the .render() off DCH_BASE as I'm starting to think I don't need it.

* placed a rudimentary rightclick-context menu into index.js, all of which needs renaming+tweaking
  just wanted to prove it works AND that I could hook it in at the window level

Need dropdown menus, topbar dropdowns,  topbar icons, ...

2025-04-22 ------------------------------------------------------------------------------------------------------------
* re-documented the new fileformat in extra/DocFileFormat.odt  (new format starts with "@1.0;" instead of "V=3;1.0")
* created DocExporter which caused recreating DocLoader+DocParser as DocImporter for comparability
* changed <div.dchHandlerDiv=true>  to <div.dchHandler=handler>
* replaced shared_docParser.js with fem_core_DocImporter.js which handles loading entire docs or just components too
* added fem_core_DocExporter.js that is successfully streaming the objects to an output stream!

* the importer/exporter ops are a little quirky in that the importer actually attaches to/replaces existing doc but
  the exporter only turns it into a stringStream.

TODO:  attachHandler, detachHandler, detachHandlers

2025-04-21 ------------------------------------------------------------------------------------------------------------
* once again revamped entire doc structure, now during the DocParser we use readNext (almost exclusively JUST to read the VER)
  followed by a series of readComponent() which returns {cname, style, data}
* new loader format is now working.  It puts new limitations on how objects load but it gives more control back to the
  loader, it also moves the loading of children to the loader so that components like 'BOX' don't do it internally any more.

Now I just have to rewrite the entire documentation!

2025-04-20 ------------------------------------------------------------------------------------------------------------
* Eureka!  We have a full websock cycle of 'backendStart, frontendStart, F-->B askfor doc, B-->F deliver doc, frontendRender!

2025-04-20 ------------------------------------------------------------------------------------------------------------
* reorganized the directories so that the entire 'envrc' handling system has been moved UP out of the git repo level
  which should make the project more 'github-friendly' as what's in git is now only what's relevant to the project

We seem to have been successful in moving things around without breaking anything, however loading vscode seems to no
longer keep individual track of our main project window location.  (it still remembers what files were opened tho and
even if files are open in detached windows, only the main window's location is semi-lost)  so I'll just have to live
with that.


2025-04-19 ------------------------------------------------------------------------------------------------------------
* added FF.registerPacketClass() as a better means of registering packet classes than I had earlier
* added process() to baseclass, to be overridden by the client or serverside, to handle that end of the processing
  so that a single packetclass can be handled differently depending on which side is receiving/processing it
      see new files [bf]_em_core_PacketHandlers.js
* packetsystem now sends/recieves and reconstructs classes that extend PacketBASE that are largely 'self-aware'
  and can largely handle themselves at the receiving end.
* started adding the basics of a sendExpect on client side that stores {packetId: [timeInitiated,callback]}

2025-04-19 ------------------------------------------------------------------------------------------------------------
* created the basics of constructing->sending->deconstructing packets, chose classes instead of dicts as I can better
  enforce the structure.  (general use:  FG.makePacket(), then packet.send())

2025-04-18 ------------------------------------------------------------------------------------------------------------
* renamed fem_core_TKMHandlers.js to fem_core_TKMEvtHandlers.js and added other events like leftright dragbar etc.
* got the index/doc resizebar working now, had to work at it!
* moved the TKM mousemove/up eventlistener add/remove actions inside the mousedown function

2025-04-18 ------------------------------------------------------------------------------------------------------------
* found easy way to find handler's toplevel div, by dropping a 'dchHandlerDiv' property on it then climbing the
  clicked-on element's parent chain to find it
* moved all the toplevel kbd/mouse handler stuff to fem_core_TKMHandlers.js
* reworked index.html so it now has a divTitlebar, divToolBar, divIndexView(for index) and divDocView(for docWrapper)

2025-04-17 ------------------------------------------------------------------------------------------------------------
the click+drag logic is looking pretty good!  it handles all cases of L,R,W,H boxsizings

however it looks like we need to track all divs that we consider 'parent' divs so when mousedragging 
we drag the parent instead of the child  (EG: we dont want to drag the textarea, we want to drag the div owning it)

this is currently just doing simple click+drag, no alt/ctrl modifiers

2025-04-17 ------------------------------------------------------------------------------------------------------------
did even more revamping of the docFormat and gave more control to the handlers
* DCH_BASE.create() now gets sr passed to it which if not null loads this.div's setup params now before calling 
    .construct() on the child
* removed .hasChunk, it's now up to the handlers to read their own chunks (so they could have multiple chunks now)
* removed makeEl() and left creating internal components to their own handling

2025-04-17 ------------------------------------------------------------------------------------------------------------
* changed parse/unparse to loadDoc and unloadDoc cuz parse is a useful word to allow the handler to own
* changed docformat to L20;T20;R20;B20;W20;H20; instead of forcing XYWH so now div can freely float to right/bottom

2025-04-07 ------------------------------------------------------------------------------------------------------------
* more adjustments to docloader so now VER isnt a handler any more, but first chars inFile must be "M.m;" for Major.Minor
* removed XYWH as vars from the class and am now relying on el.style.top/left/(width/right)/(height/bottom)
* fleshed out the FF.newDoc() and FF.clearDoc() functions
* added DOCS.txt to remind me how I intend to start handling keyboard/mouse ops in a way that won't interfere with 
* commonly used ops inside any DocHandler
Next up is start addling keyboard/mouse handlers (see DOCS.txt)

2025-04-06 ------------------------------------------------------------------------------------------------------------
Did some more constructor reworking to cleanup handler creation a bit more
doc loads nicely now and implemented a supersimple textarea for the TXT handler! (Renamed to TXA from TXT)

2025-04-05 ------------------------------------------------------------------------------------------------------------
Another restructuring
* found that vars put directly on a childclass arent seen by the baseclass (at least not in the constructor) so I
  created a construct() function the children must implement that's called by the baseclass constructor()
* moved the load/unload routines OUT of the baseclass into DocComponentLoader to make the handlers more 'pristine'
* renamed DocComponentLoader to DocLoader as it's now directly relative to doc and no longer to the DocComponents
* added JSDoc stuff to the baseclass to try to make it easier to see the child/parent/impl/override etc nature
* changed load(sr,parent)/str=unload() to parse(sr)/str=unparse() as !must impl! emptyFuncs baseclass
* moved setting of parent and div creation/attachment (this.div) to constructor()
* moved setting XYWH "px" to DocLoader parse()

2025-04-05 ------------------------------------------------------------------------------------------------------------
I was going to allow XYWH to let negative WH work from the right border, but OneNote never did that, and I think it just
complicates things,  so we'll stick with XYWH being absolute values
* changed 'isRaw'   to 'hasChunk'
* changed 'hasXYWH' to 'hasDiv'
* I unfortunately finally lost in an attempt to define class functions beneath the class when I tried using super.func()
  so I have instead changed these to be simple comments at the top of the class for clarity, while at the bottom of the
  class the actual function exists (instead of being defined beneath the class)
* loading AND drawing now works!  ... at least in a testing capacity
* I have also reintroduced allowing negative WH as I found that by making all divs 'position="absolute"' this now works!
    (I still do not see a need for it in a document like this, but it's nice to know it works!!)

2025-04-04 ------------------------------------------------------------------------------------------------------------
added a VER handler to load a version from the file for the purposes of updating
* changed 'type' to 'hasXYWH' and 'isRaw'

starting to get the visual layout working,  'BOX' now shows a box
next is to get TXT working too

2025-04-03 ------------------------------------------------------------------------------------------------------------
Now that I got the loader working ... I rewrote it again!  NO LONGER uses +=-  just straightup BOX TXT etc objects

2025-04-03 ------------------------------------------------------------------------------------------------------------
have it now loading the sample doc, including stepping in and out of children.
next aim is to display these loaded DocComponents 

2025-04-01 ------------------------------------------------------------------------------------------------------------
began fleshing out classes to load/unload an actual document, and to define the format of a document as well
(I am avoiding using the word Jot or JotLiner anywhere in the code as I still may change the name of the project)

2025-04-01 ------------------------------------------------------------------------------------------------------------
began laying out overall 'frame' of file format
figured out new way to achieve c++-like inheritance without using .prototype
moved all client code one subdir deeper (under html) so that .vscode, .envrc etc arent part of the user content

2025-03-31 ------------------------------------------------------------------------------------------------------------
got all the basics of loading bem_core_<name>.js modules working in both frontend and backend of client
reworked globals and initialization (formerly bootstrap) to be more 'appropriately positioned'?

at any rate the basics on both front and backend are now all set up to work properly once again!

2025-03-30 ------------------------------------------------------------------------------------------------------------
managed to seperate client and server into 2 diff debuggers so I can launch 
    code code.workspace in the server dir and F5 to run and debug that
    --and seperately launch--
    code code.workspace in the client dir and F5 to run and debug that AT the same time


2025-03-28 ------------------------------------------------------------------------------------------------------------
got the most basic stuff working now
got a simple 'client/jotliner.html' setup and debuggable using vscode
got a simple 'server/jlserver.js' setup (as an express server on 8080) and debuggable using vscode

next step is to move the bulk of the functionality out of 'project.jotliner_02' into this project
2025-03-28 ------------------------------------------------------------------------------------------------------------
Starting project anew (again!)
Concept this time is everything runs in a webpage and it talks to an SQL DB on some backend

Notion here is that html already handles all we desire, we just have to figure out how to make it work for us


