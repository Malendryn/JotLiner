2025-06- ------------------------------------------------------------------------------------------------------------
2025-06- ------------------------------------------------------------------------------------------------------------
2025-06- ------------------------------------------------------------------------------------------------------------
2025-06- ------------------------------------------------------------------------------------------------------------
2025-06- ------------------------------------------------------------------------------------------------------------
2025-06- ------------------------------------------------------------------------------------------------------------
2025-06- ------------------------------------------------------------------------------------------------------------
2025-06-18 ------------------------------------------------------------------------------------------------------------
256000

*

2025-06-17 ------------------------------------------------------------------------------------------------------------
* renamed NewDch packet to AddDch (just feels more inline with Add/Mod/Del)
* moving to a 'send instrux to server, deal with broadcast response to handle' model rather than make mods to client
    before telling server about changes and then having to handle the broadcast response via 'if I sent it I do
    X while all other clients do Y' and thus doubling the workload.
* added html/modules/shared/shared_Functions.js as globalThis.SF
* added dcwRealTree = SF.flatToReal(dcwFlatTree) and dcwFlatTree = SF.realToFlat(dcwRealTree)
* AddDch and DelDch (and ModDoc response) have all been coded, but not yet tested,  tomorrow...!

* changed many _s_ props on DCW_BASE to #props (#dch, #dchRecId, #sysDiv, ...) and now have get/setters for them
* backend is now correctly performing AddDch and DelDch and broadcasting aproper ModDoc, time to work the BtoF logic!

2025-06-16 ------------------------------------------------------------------------------------------------------------
* renamed all _c_ to _h_ (dCh to dcH) to be more inline with _w_ dcW 
* renamed table:doc.dcwList to dcwFlatTree
* figured out some logic on packet handling and inserting new DCH's etc,  still much to do tho!

2025-06-15------------------------------------------------------------------------------------------------------------
* added trace2() and 3() to see caller->caller->msg, etc...
* reworking some more paradigms, changed autoSave back to 'only one timer' cuz really all things must happen in order
* fixed some bugs that cropped up in the better-sqlite3 replacement
* refined the autoSave(),  added deadlock() to wait for autosave to complete (so remember to autosave(0) first!)

2025-06-14 ------------------------------------------------------------------------------------------------------------
* cleanup, changed all autoSave to new format, changed all waitDirty to flushAll aind got rid of all dirty flags
* discovered an oversight in the way obj{}'s handle ordering that blew things up.  created a new DFDict class to resolve
* renamed table:doc.meta to table:doc.dcwFlatTree as meta was starting to feel 'overly generic' and since the dch/dcw split
    this felt more appropriate,  also with the changeover to the new DFDict this table had to be reconstructed anyway
* replaced sqlite3 with better-sqlite3 and rewrote DBHandler class.  
* added get() to DBHandler which returns single recs and thus supports INSERT...RETURNING which we need for bumping
* beefed up onChanged logic so now packets have .prototype.onChanged dispatchers
* got NewDch and ModDoc packets working so inserting dch elements in a doc now works again


2025-06-13 ------------------------------------------------------------------------------------------------------------
* renamed dchData table to dch
* testing all front/backend communication  from the beginning to assure all these new changes haven't broken anything

2025-06-12 ------------------------------------------------------------------------------------------------------------
* working out the logic for 'changed' packets which now must encompass dchData table entries too
* created 2 new classes DFSortedList and DFTimeList
* built a timer-fifo for handling the new autoSave system,  still needs some fleshing out but overall pretty happy
    with it
* removed DFTimeList and reconstructed it as DFTimedQueue to handle autoSave and flushAll as one contained class

2025-06-11 ------------------------------------------------------------------------------------------------------------
* contextmenus now work again, alt+shift drag/resize works, alt++shift+z drag zX/Y works, but the 'red edge' showing
    a dcw is not completely within the BOX is not working

2025-06-10 ------------------------------------------------------------------------------------------------------------
* changed DCW_ShadowRect to DCW_BASE as all 'shadow' ops are subfunctions added /after/ the dch is known.
* finally got some visual action working again. dch's now load and display but the rest of the system is still borked
    as things now happen on two levels,  most of what WAS called dch is now called dcw (Cocument Component Wrapper)
    and the system has to be reworked for that scenario
* got more things working.  can now select dcw's and it shows/hides titlebar propertly, can now click off a doc and 
    it properly removes the current doc
* removed FF.getDchAt (never needed to be on FF as its used ONLY in DocViewHandler) and renamed to getDcwAt
* renamed most of the dch refs to dcw, but will pretty much have to test the whole system through and through to
    see what I've missed
* got more stuff working,  progress is slow but steady!
# renamed most properties in DCW_BASE to make it easier to figure out who(sys,private,dch) can access what (_s_, #, _c_)

2025-06-09 ------------------------------------------------------------------------------------------------------------
* branch rework/0.2.0
* started revamping DCH_ShadowBase, removed toolbar from it as at this stage it's not needed yet, but it still builds
    the main shadowRoot.
* added WS.sendBatchExpect(pkt, key, callback, context) to allow a single request to return multiple responses
    caveat is that client must eventually call WS.clearBatchExpect(key) to stop 'expecting' that packet
* have DCH_ShadowBASE reworked into DCW_ShadowRect and now call these dcw's, and dch's will be attached as DCH_BASE'same
    inside at this.#dch
    
2025-06-08 ------------------------------------------------------------------------------------------------------------
* began upgrade of db from 6 to 7, this will be another big change where we extract individual dch's (plugins) from
    the single table:doc.content into table:dch records and track them via the new table:doc.dchList column.
* have the upgrade from 6 to 7 working wherein it adds the columns and tables as needed, and extracts the 
    table:doc.content into the table:dch records AND builds the table:doc.dchList as well. (and sets bump=0 on all recs)
WARN: the old data still exists in .content until we finish migrating over, and then we will add a 7 to 8 dbUpgrade 
    that removes the table:doc.content column, but not until we're entirely happy with the upgrade! 
TODO: make the rest of the software use these new changes! 
* 'reworked' the main software version# so was: 1.2,  now: 0.1.2
* added version# to titlebar display

* RE-rework .. dch table is now dchData and houses ONLY the dch's name (BOX,etc..) and exported data, NOT style
* doc now has 'meta' instead of dchList which contains style & children info (everything needed to create the dch's
    even before the content is present so we can start lazyloading and not so much async/await'ing!)
    also storing this as JSON rather than binary as its easier to debug, but dchData table is still binary
* dbUpdate_000006-000007 now does this conversion, but the rest of the system still uses old 'content' column for now

2025-06-06 ------------------------------------------------------------------------------------------------------------
* added a new call setToolbarHeight(n) to change the height of the toolbar from the default(30) to whatever the plugin
    needs.  (added a pluginHeight = n; as an optional setting at the top of the class as well)
* fixed an oversizing issue with the CTE plugin
* fixed minor quirk in that when no doc selected, alt+shift took over the title/toolbar areas
* cleaned up a few minor things.  Reworked some plugins slightly to be more shadow-compatible too
* removed rootlevel dchToolbarBasics.css and now expect the plugins to handle their own toolbar <style> by themselves

2025-06-05 ------------------------------------------------------------------------------------------------------------
* renamed DCH_BASE to DCH_ShadowBASE as I work towards making a compatible DCH_LightBASE as well, but for now it's just
    a simple rename
* privatized .host and .toolbar in DCH_ShadowBASE as I prepare to shadow-dom the toolbar too (and construct the tree
    so it has a faux <head> area too)
* got DCH_ShadowBase reworked so there is now a <div> for styles followed by a <div> for body, also applies to the new
    shadowed toolbar.
* the rootlevel 'dchToolbarBasics.css' is loaded into all dch.#toolbars upon creation.  (unsure about this though)
* privatized a few values so they can't be overridden (eg: .host is now a setter/getter for .#host)

2025-06-04 ------------------------------------------------------------------------------------------------------------
* added "sourceMaps" and "resolveSourceMapLocation" into launch.json (local change only but refed here for my own note)
    to resolve a problem with CK5 loading from the weblink and complaining about vanilla-colorful math.js.map missing
* added new classes DFStyleTracker.js and DFListenerTracker.js that now use DFSingleFire.js to control 'perform once'
    operations like loading a stylesheet or adding an eventlistener with the same parameters
* started testing on another machine pointing back to this one and immediate fail due to crypto.randomUUID() so converted
    the software to use https, using a local key+cert .pem file (so browser warns but thats still fine for home testing)
    Still works with just http if .pem files are missing, but will not work anywhere but localhost without them
    (see comment at top of server.js on how to create the key and cert files for yourself)

2025-06-03 ------------------------------------------------------------------------------------------------------------
* experimented with fleshing out both a CK4 and CK5 editor plugin.  Ran into problems with CK4 that will probably
    eliminate that one as a possibility but only just started testing with CK5
* added new class 'DFSingleFire.js' intended to supercede DFTracker.js as a more generic way to 'oneshot' function
    calls like addEventListener and removeEventlistener, but allso addStyle/removeStyle etc etc...

2025-06-02 ------------------------------------------------------------------------------------------------------------
* got rid of set/getJLDI() and replaced with a new LocalStore class that encapsulates the job much better now
* now remembers slider position based on current db selected
* removed 'open new instance' as an option from the file menu as since it's a webpage you can always just rightclick
    the webpage tab and duplicate already
* moved the loading of all dch's out of index.js and back into DCH_BASE so 'hotloading' is once again supported.
    (no reason to load all these dch classes when only accessing one or two of them for the current given page)
    
2025-06-01 ------------------------------------------------------------------------------------------------------------
* many changes occurred on a seperate branch just to handle upgrading all files to the 2.0 format spec, which have 
    only been documented as commit msgs in git.  They basically detail the process such as it's been reguarding the
    whole upgrade procedure but has not otherwise changed the effective way in which the software works.
  To whit, database doc recs now have the version and uuid in seperate fields (as always) but the content field is
    a purely binary 'dchList' of dch's with the version and uuid no longer part of it.  And while I had originally
    been working to have a validation process on the serverside for importing exported docfiles (.jldoc files) I 
    have re-located the import process to the client,  1) to keep the load off the server and 2) so the server
    effectively has no awareness of the content of the blob.
* got export to 2.0 fileformat working now too
* got import and export fully working, though it could bear some more testing just to be sure.
* added a 'DocFileFormat 2.0.odt' file under the extra/docs dir to explain how the new binary format is interpreted
* finally merged all changes back into the main branch
* did a few quick cleanups and a little improvement on the PacketDefs comments at the top of the file

2025-05-29 ------------------------------------------------------------------------------------------------------------
* renamed subdir 'dbExporters' to 'converters' as I will be moving the document conversion code (1.0 -> 1.1 -> 1.2)
    code into there as well, and out of the clientside
* moved all the validation and breakdown procedures to the server to facilitate commonality and to allow the db
    update procedures to manage all that on the backend.  (also helps in preventing clientside errors )
2025-05-27 ------------------------------------------------------------------------------------------------------------
* db conversion underway, 3->4 completed now, reworked table docTree so that parent is now an int reffing back to the 
    recs id instead of the recs uuid, also added 'bump' field
* 4->5 completed, moved the 'name' out of table:docTree and into table:doc, and updated all code to match.  (this change
    was purely serverside)
* made index pane contextMenu entry 'export document' now works, since as part of the phase of the next db upgrade 
    from 5->6 will change the export format as well, I wanted a quicker way to compare old vs new and having this
    exporter working /now/ will facilitate that.

* DocImporter is now v1.2 and uses 0x1E as the seperator instead of ';'
    and also inlcudes the docName now too.  We are gradually moving towards a mostly binary (uint8array) storage format
    and these are the first stages of that process
* added importers recognition of '\' as an escape of the next char, even though its now largely obsolete by using
    0x1E as the new seperator char

2025-05-26 ------------------------------------------------------------------------------------------------------------
* various cleanups,  renamed a .doc, got rid of some stale files,  fixed a .gitignore, etc...
* fixed some old license references to Apache  --> AGPLv3
* turned what was FG.DCH_BASE into a real importable class in the new html/modules/classes directory
* beefed up the new JLPAINT plugin slightly, and completed the 'HOWTO create a plugin.odt' document

2025-05-25 ------------------------------------------------------------------------------------------------------------
* finished the DocFileFormat 1.1.odt documentation
* wrote and added a DFListenerTracker class and added it to DCH_BASE so all plugins can use it as a clean way to add
    and remove listeners, which will automatically be removed when the plugin is .destroy()'ed.
* removed addTrackedListener(), removeTrackedListenerById() and removeAllTrackedListeners() from fem_core_Functions.js
* minor cleanups

 2025-05-24 ------------------------------------------------------------------------------------------------------------
* DCH_BASE .loadCss is now .loadStyle(str) and it now supports a str of "<style>...</style>" or a URL path to a .css file
* DFDialog has also been significantly tweaked to allow styles to be applied in a similar manner as DCH_BASE now does
* DFContextMenu and DFMenuBar now accept the cssList as part of the class constructor, but otherwise operates the 
    same as DFDialog does now.
* further reworking of DFDialog, changed the params to open() to always be a dict.  Just adds much more flexibility!
* doing the same for DFContextMenu and DFMenuBar which adds the bonus of allowing DFMenuBar to pass a different 
    list of stylesheets to DFContextMenu, which it wasn't able to do before
* changed internal version to 1.1 so docImporter can handle a new storage format that now allows for many 'true' datatypes
    to be stored rather than everything-must-be-a-key-value-STRING-pair
* the new JLPAINT plugin is working!   
* in the anchor dialog, min width and height now limited to min=20

2025-05-23------------------------------------------------------------------------------------------------------------
* fixed compatibility issue between firefox and chrome that was due to the way I was shoehorning <style> into the
    <form> data.  DFDialog now allows "form" -or- {form:"form", style:"style"} as a parameter to pass in a proper
    style block that now gets attached to the head where it belongs. (and removed when dialog closes)
* added quick temporary actions to the Help menu for About and License
* changed 'properties' to 'Layout, anchors and depth' and introduced a new properties menu option which will be a 
    direct call to the dch handlers to create their own properties dialog
* adding a new plugin under JLPAINT as a tiny painting program (primarily for demoing how to create plugins)
* moved .odt and .dia files in /extra to /extra/docs
* added extra/docs/DCHModuleBuilding.ods to document the node creation process (using JLPAINT as an example)
* moved various testing .html files out of /client into /extra/test HTMLs
* fixed a bug in where tooltips werent appearing in context menus
* realized I was missing a few files by accident!  added now

2025-05-23 ------------------------------------------------------------------------------------------------------------
* renamed TKMEventHandlers to DocViewHandler -- just makes more sense now that it's evolved
* new child docs will now properly expand the doc they are a child of
* remembering expanded state of index entries is now stored and recalled when starting program or changing dbs
* fixed bug wherein deleting a doc with children stopped warning it would delete them too
* fixed bug in server where inserting new recs wasn't properly returning the new recId

2025-05-22 ------------------------------------------------------------------------------------------------------------
* cleaned up and reworded a few more readme's and texts (primarily for github public reading)
* re-introduced autoincrement id fields to the extra and doc tables to prevent future 'shooting myself in the foot'

2025-05-22 ------------------------------------------------------------------------------------------------------------
* renamed original CHANGELOG.txt to CHANGELOG-pre_github.txt and started this new file to replace it
* cleaned up and reworded a few of the readme's